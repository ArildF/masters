<?xml version="1.0" encoding="utf-8"?>
<chapter id="chapter_3">
  <title>The CLR and garbage collection</title>
  <sect1 id="chapter_3-sect-1">
    <title>The CLR</title>
    <para>The <firstterm>Common Language Runtime</firstterm> is an effort by
    Microsoft to create an execution engine and a class library and framework
    that allows a wide variety of languages to interoperate in a virtually 
    seamless manner. The CLR is generally considered to be the successor to 
    Microsoft's <firstterm>Component Object Model</firstterm> (COM) technology.
    <footnote><para>Not surprisingly, given this position as a successor to COM, 
    the Microsoft implementation of the CLR has comprehensive support for 
    interoperating with COM, including support for both consuming and
    producing COM components.</para></footnote></para>
    
    <para>One of the defining features of the CLR is the support for multiple
    languages. Components written in one language can be consumed directly by
    components written in another language as long as they both target the
    <firstterm>Common Language Subset(CLS)</firstterm>. The CLS represents a
    subset of the features of the CLR. In .NET parlance, a <firstterm>CLS
    consumer</firstterm> is a language that can utilize all the functionality
    in the CLS. Similarly, a <firstterm>CLS producer</firstterm> is a language
    that can produce code consumable by .NET consumers. Most .NET languages are
    both CLS consumers and producers.</para>
    
    <para>The CLR is standardized by the 
    <firstterm>European Computer Manufacturers Association</firstterm> (ECMA) and
    the <firstterm>International Organization for Standardization</firstterm>
    (ISO). As an open standard, it can be implemented by anyone under  
    <firstterm>Reasonable And Non Discriminatory</firstterm> (RAND) terms.
    At the time of writing, implementations of the CLR include Microsoft .NET, 
    Mono<xref linkend="mono"/>, Portable .NET<xref linkend="portabledotnet"/> and 
    the Shared Source CLI<xref linkend="sscli"/>.</para>
  </sect1>
  
  
  <sect1 id="chapter_3-sect-2">
    <title>Garbage collection in the CLR</title>
    <para>The ECMA standard that defines the Common Language Runtime is 
    rather silent on the subject of garbage collection. Volume 1, 
    Architecture<xref linkend="ecma-vol-1"/> only mentions the term
    <quote>garbage collection</quote> once, and even then very briefly.
    The detailed specification<xref linkend="ecma-bcl-detailed"/> of 
    the <firstterm>Base Class Library </firstterm> does however contain the 
    following note:</para>
    
    <blockquote><para>The garbage collector is responsible for tracking and reclaiming
    objects allocated in managed memory. Periodically, the garbage collector
    performs a garbage collection to reclaim memory allocated to objects for
    which there are no valid references. Garbage collections happen
    automatically when a request for memory cannot be satisfied using available
    free memory. A garbage collection consists of the following steps: During a
    collection, the garbage collector will not free an object if it finds one
    or more references to the object in managed code. However, the garbage
    collector does not recognize references to an object from unmanaged code,
    and may free objects that are being used exclusively in unmanaged code
    unless explicitly prevented from doing so.</para></blockquote>
    
    <para>Even so, the lack of a detailed specification of the memory
    management model in the main specification implies a considerable
    flexibility in how a CLR-conforming implementation manages memory. However,
    all the existing implementations of the
    CLR use a tracing garbage collector, as
    described in the previous chapter.</para>
  </sect1>
  
  <sect1 id="chapter_3-sect-3">
    <title>Finalization</title>
    <para>A large number of .NET classes hold onto resources beyond the actual 
    memory they occupy in the managed heap. For example, objects of the .NET 
    <classname>System.IO.FileStream</classname> type own an operating system file 
    handle. Likewise, <classname>System.Windows.Forms.Control</classname> objects
    (with descendants) hold onto a window handle (a <classname>HWND</classname>).
    <classname>System.Drawing.Brush</classname> objects keep a reference to a Windows
    brush object (a <classname>HBRUSH</classname>).</para>
    
    <para>These resources are not available in infinite supply. The operating 
    system has a limited number of them, and it is important that code that
    acquires such a resource also releases it in a timely fashion.</para>    
    
    <sect2 id="chapter_3-sect-3-1">
      <title><function>Finalize()</function></title>
      <para>To ensure these kinds of resources can be released, the CLR 
      <classname>Object</classname> type declares a virtual method called 
      <function>Finalize()</function>. Types can override this method and 
      use it to release whatever unmanaged resources they are holding on to.
      The garbage collector will call this method before the object is finally 
      destroyed and its memory released back to the managed heap. A typical 
      Finalize() implementation might look like this:</para>
      
      <example>
        <title>A class with a finalizer</title>
        <programlisting><![CDATA[

public class Brush
{
   public Brush()
   {
      this.handle = Win32.CreateBrush();
   }   
   
   protected override void Finalize()
   {
      Win32.CloseHandle( this.handle );
   }
   
   // implementation omitted
   
   private IntPtr handle;
}      
      ]]>      
      </programlisting></example>
      
      <para>In C# and C++, two of the languages that run on the CLR, the 
      <function>Finalize()</function> method is declared using the same syntax
      as C++ destructors. The finalizer from the above example would then look
      like this (in C#):</para>
      
      <example>
        <title>Finalizer destructor syntax</title>
        <programlisting><![CDATA[
    ~Brush()
    {
      Win32.CloseHandle( this.handle );
    }      
      ]]>
      </programlisting></example>
    </sect2>
    
    <sect2 id="chapter_3-sect-3-2">
      <title>The finalizer queue</title>
      <para>When a GC heap is collected, objects that have a finalizer are
      <emphasis>not</emphasis> collected right away. Instead they are put in a
      special data structure called the <firstterm>finalizer queue</firstterm>. 
      A background thread, the <firstterm>finalizer thread</firstterm>, starts
      up and visits all the objects in the queue, invoking their 
      <function>Finalize</function> methods. If the act of finalizing them 
      doesn't revive them (make them accessible again from some other object),
      they are again marked for garbage collection and picked up by the 
      collector on its next run. If they are resuscitated, they will be placed
      back on the finalizer queue, awaiting the next garbage collection in 
      which they are collected.</para>
      
      <para>The behavior just described causes objects with a finalizer to 
      have a longer life than objects without one. If you have a large number
      of finalizable objects in your system, performance will obviously 
      suffer, since these objects will have a much longer lifespan; i.e. 
      they will always survive at least one garbage collection. The external
      resources these objects hold on to will also be held for a longer time
      than necessary, since the finalizer won't necessarily be run instantly
      after the object has been collected.      
      </para>
      
      <para>One other thing about finalization is that there is no 100%
      guarantee that it will happen. In some cases, the program might
      exit without having run all of its finalizers. When a program is exiting,
      the runtime gives a certain amount of time for remaining finalizers to 
      run. When the time runs out, the finalizer thread is killed off and the
      runtime (and the program with it) is shut down anyway). There is only a
      single finalizer thread, so any one of the finalizers could prevent the
      remaining ones from running by taking too long to execute. </para>      
    </sect2>
    
    <sect2 id="chapter_3-sect-3-3">
      <title>The IDisposable pattern</title>      
      <para>As the previous section describes, relying on the finalizer to 
      take care of your external resources has some drawbacks: it is 
      non-deterministic in that you never know when (or even if) it will run, 
      and it causes objects to linger and hold on to memory for a longer time
      than necessary. To support a more deterministic way of releasing said
      resources, the designers of the .NET framework provided the 
      <firstterm>IDisposable pattern.</firstterm></para>
      
      <para><classname>System.IDisposable</classname> is an interface defining a single
      method, <function>Dispose()</function>:</para>
      <example>
        <title>The <classname>IDisposable</classname> interface</title>
        <programlisting><![CDATA[
namespace System
{
  public interface IDisposable
  {
    void Dispose();
  }
}]]></programlisting></example>
      <para>Types that own unmanaged resources will implement this interface.
      The user of such a type can then call <function>Dispose()</function> 
      explicitly when he is done with the object, causing the resource to be
      freed instantaneously. For types where another name for this method would
      be more semantically correct, one can provide another method with the
      appropriate name and have it call <function>Dispose()</function> (or the 
      other way around). For example, the <classname>FileStream</classname> class 
      implements <classname>IDisposable</classname>, but provides a <function>Close()
      </function> method intended for the consumer to use. Quite a few of the 
      types in the Base Class Libraries implement <classname>IDisposable</classname>,
      but any application programmer designing types with non-trivial 
      finalization requirements are also encouraged to make use of this 
      interface.</para>
      
      <para>A strategy of implementing <emphasis>only </emphasis>
      <classname>IDisposable</classname> can be a bit dangerous, though. You have no 
      guarantees that the user will ever bother calling 
      <function>Dispose()</function>, even if you write it in bold red type in
      the documentation (programmers can't read, and even if they could, they 
      wouldn't want to). Most such types will therefore also implement a 
      finalizer, in case the <function>Dispose()</function> method is 
      never called.</para>
      
      <para>Obviously, having 
      <emphasis>both</emphasis> <function>Dispose()</function> and 
      the finalizer being called would be 
      pretty wasteful. Yes, you would dispose of the unmanaged resource, but
      the problem of having finalizable objects linger for a much longer time
      than necessary would remain. Fortunately, you can tell the garbage 
      collector <emphasis>not</emphasis> to finalize a specific object if it's
      already been disposed. The most common implementation of <classname>
      IDisposable</classname> will call the <function>GC.SuppressFinalize()
      </function> method once it has disposed of the unmanaged resource: 
      </para>
      
      <example id="example-suppressing-finalization">
        <title>Suppressing finalization</title>
      <programlisting><![CDATA[ 
public class Foo : IDisposable
{
    public Foo()
    {
        this.resource = CreateResource();              
    }
    
    ~Foo()
    {
        DoDispose();
    }
    
    public void Dispose()
    {
       DoDispose();
       GC.SuppressFinalize( this );
    }
    
    protected virtual void DoDispose()
    {
        FreeResource( this.resource );
    }
    
    // ...
    // implementation omitted
    // ...
      
      
    [DllImport( "os.dll")]
    private extern IntPtr CreateResource();
      
    [DllImport( "os.dll")]
    private extern void FreeResource( IntPtr resource );
   
   private IntPtr resource;  
   
}      
      
      ]]>
      </programlisting></example>
      
      <para>When <methodname>IDisposable.Dispose()</methodname> is called in
      the <classname>Foo</classname> class in the above example, it ensures
      that the object is removed from the finalizer queue. This avoids the
      problems associated with finalizers, in which the presence of a finalizer
      on a type causes the object to linger for a much longer time than
      otherwise necessary.</para> 
      
      <sidebar>
        <title><classname>DllImport</classname></title>
        <para>The <classname>DllImport</classname> attribute applied on the 
        <methodname>CreateResource()</methodname> and 
        <methodname>FreeResource()</methodname> methods in 
        <xref linkend="example-suppressing-finalization"/> indicates to the 
        runtime that these are not implemented in managed code. Instead they 
        are routines provided in dynamic libraries (<filename>os.dll</filename>
        in this case). This is yet another example
        of how versatile the CLR metadata mechanism is.</para>
      </sidebar>
      
      
      <para>A typical use of the <classname>Foo</classname> class would be like
      this:</para>
      <example>
        <title>Using an <classname>IDisposable</classname> object</title>
      <programlisting><![CDATA[

Foo foo;
try
{
    foo = new Foo();
    
    // use foo here
}
finally
{
    foo.Dispose();
}
]]></programlisting></example>
      <para>Putting the <methodname>Dispose()</methodname> call in a finally 
      ensures that the object will be cleaned up even if the code in the try 
      block throws an exception.</para>
      
      <para>The <function>using</function> construct in C# makes the 
      IDisposable pattern even easier to use. The following C# code is 
      equivalent to the above example:</para>
<example>
  <title>The <function>using</function> statement</title>
<programlisting><![CDATA[
using( Foo foo = new Foo() )
{
    // use foo here
}
]]>  </programlisting>  </example> 
      
      
      
    </sect2>
  </sect1>
  
 
</chapter>
