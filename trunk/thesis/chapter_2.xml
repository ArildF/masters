<?xml version="1.0" encoding="utf-8"?>
<chapter id="chapter_2">
  <title>Automatic memory management</title>
  <sect1 id="chapter_2-sect-1">
    <title>Garbage collection</title>
    <para>Automatic memory management is commonly referred to as <firstterm>garbage 
    collection</firstterm>, referring to how the mechanism automatically picks
    up the garbage after the programmer. This term is not altogether precise in 
    some cases, since some of the algorithms focus more on detecting and picking
    up all <emphasis>non</emphasis>-garbage objects, followed by a sweep of 
    whatever remains. The word <quote>garbage</quote> in this context refers
    to objects that are no longer in use by the program.</para>
    
    <sect2 id="chapter_2-sect-1.1">
      <title>The history of garbage collection</title>
      
      <para>While the previous chapter may have appeared to portray 
      garbage collection as a new trend in programming languages, it actually has
      a history almost as long as that of high level programming itself. In fact,
      the second high level programming language ever created, Lisp, sported a
      garbage collector already in its initial specification in 1960
      <xref linkend="mccarthy-1960"/>. Subsequent versions of Lisp, including
      Scheme and Common Lisp, have all included various forms of garbage
      collectors. It is hard to conceive of a language in the extended Lisp
      family (functional languages) featuring manual memory management, due to
      the dynamic nature of their runtime environments.</para>
      
      <para>The Symbolics Lisp Machine was unique in that it had direct 
      hardware support for garbage collection.</para>
      
      <para>The SIMULA programming language was designed and implemented by 
      Ole-Johan Dahl and Kristen Nygaard at the Norwegian Computing Center in 
      Oslo between 1962 and 1967. Recognized as the first object-oriented language,
      it was also one of the first imperative languages in wide use to utilize a
      garbage collector. The garbage collector used in Simula-67 required four
      passes over the object graph in order to determine what was garbage and 
      dispose of it.</para>
      
      <para>The language Smalltalk, inspired by Simula, was developed 
      by Alan Kay and others in the 1970s at Xero'x Palo Alto Research Center (PARC).
      It also included garbage collection as a central element. Again, this was
      made necessary by a highly dynamic runtime environment.</para>   
      
      <para>In modern times, pretty much every new language introduced support
      some form of automatic memory management. The concept of garbage collection 
      is usually an inherent feature of the language in question. As mentioned
      earlier, functional languages like Lisp would be hard to conceive without
      some kind of automatic memory management. Very high level languages,
      those often referred to as <quote>scripting</quote>languages (Python,
      Perl etc...), would also be hard to imagine having manual memory
      management. For this reason, language specifications usually either
      explicitly or implicitly indicate that a language should use some form of
      garbage collection.</para> 
    </sect2>
    
    <sect2 id="chapter_2-sect-1.2">
      <title>Garbage collection and performance</title>
      <para>Garbage collectors have long had a bad reputation among developers
      focussing on raw performance as the primary goal, and they were mostly
      considered an unneeded luxury by programmers developing in languages like
      C and C++. Garbage collection by the system would often be a 
      time-consuming operation, and would cause noticeable pauses during 
      program execution. Many programmers felt that this was a waste of system
      resources and that they would be better off managing memory manually.</para>
      
      <para>This has changed in later years for several reasons: Computer
      hardware is now faster than it ever was (and is still getting faster, 
      despite dire predictions of the opposite), making the aforementioned
      pauses far less noticeable, and there has been a lot of research effort 
      into creating ever better algorithms for effective garbage collection. 
      Computer memory (RAM) is cheaper per megabyte now than it has ever been, 
      and virtual memory mechanisms ensure that a large memory space is 
      available to applications.</para>
      
      <para> Of course, progress in this area has been offset somewhat by the
      need for more and more (and bigger!) objects in even small programs, but
      Jacob Marner makes a good case<xref linkend="marner-2002"/> for why it is
      perfectly conceivable to use a garbage collected language like Java for a
      soft real-time application such as a 3D computer game.</para>
    </sect2>
    
    
    <sect2 id="chapter_2-sect-1.3">
      <title>Types of garbage collection mechanisms</title>
      
      <para>One can categorize garbage collection mechanisms in various ways, 
      but one possible rough taxonomy would be to classify them into 
      <quote>tracing</quote> garbage collectors and <quote>reference 
      counting</quote> garbage collectors.</para>
    
      <sect3 id="chapter_2-sect-1.3.1">
        <title>Tracing garbage collectors</title>
        
        <para>A tracing garbage collector operates on the principle that an
        object that cannot be reached from any other reachable object in the
        system is garbage. In other words, an object that cannot be part of any
        future computation can be disposed of. It determines which objects
        fulfil this criterion by building a graph of object references starting
        from a set of well-known <quote><firstterm>roots</firstterm></quote>.
        These roots usually include local method/function variables in stack 
        frames that are currently live. They also include static fields and 
        global variables.</para>
        
        <para> These references are traced recursively,
        eventually obtaining the transitive closure of all objects reachable
        from the roots. Any object that is <emphasis>not</emphasis> found in
        this graph is considered garbage and is cleaned up by the
        system.</para> 
        
        <para>Cleaning up means, in simple implementations, merely to mark the
        memory previously occupied by the object as vacant and available for future
        memory allocations. Such a simple scheme has the same problem a traditional
        memory allocation function like <function>malloc()</function> has: the
        memory heap used for the allocations will get fragmented, and it requires
        quite a lot of bookkeeping merely to keep track of the occupied and vacant
        areas of the heap. New allocations will have to search through a set of lookup
        tablesin order to find a section of memory large enough to accommodate
        the request. In some cases, there may not be a single segment in the
        heap large enough to fit the new object even if the total available
        amount of memory far exceeds the demands. This is called 
        <firstterm>fragmentation</firstterm>.</para>
      
        <sect4 id="chapter_2-sect-1.3.1.1">
        
        <title>Compacting garbage collectors</title>
        
        <para>For this reason, garbage collectors in actual use also <firstterm>
          compact</firstterm> the heap when performing a garbage collection. Heap
          compaction in this context means that all <emphasis>live</emphasis>
          objects are copied to and placed together in a single continuous
          segment of memory. Dead objects are not copied. This makes subsequent
          memory allocations a very simple operation. The allocator can just
          maintain a pointer to the end of this segment, and whenever a request
          for memory comes in, it can satisfy this request by just returning the
          value of this pointer and incrementing it. A <function>new</function>
          statement then merely becomes a pointer increment. This is orders of
          magnitude faster than a traditional <function>malloc()</function>
          implementation.</para> 
          
          <para>Such a scheme also has the added benefit of
          increased locality (although this is dependent on the exact details
          of the compaction algorithm). Related objects will tend to be placed
          close to each other in memory, something that makes it far more
          likely that the processor can maintain them in one of its caches.</para>
        
        </sect4>
        
        <sect4 id="chapter_2-sect-1.3.1.2">
        
          <title>Generational garbage collectors</title> 
          
          <para>Of course, this scheme requires that a lot of memory is copied
          around. Additionally, pointers to the objects in the old locations need
          to be backpatched to point to the new locations. These can be
          time-consuming operations.</para>
          
          <para>A generational garbage collector exploits the fact that most 
          objects have a relatively short life. To do this, it divides the heap
          into two or more <firstterm>generations</firstterm>. Objects are 
          initially allocated in the heap belonging to the first generation. If
          an object survives a garbage collection, it is copied or
          <firstterm>promoted</firstterm> into the next higher generation. When
          working in this manner, the collector can restrict garbage collection
          runs to a single generation, which can be collected very quickly.
          Full garbage collections, spanning all generations, only need to be
          performed every once in a while.</para>
        
        </sect4>
        
        <sidebar id="chapter_2-sidebar-1">
          <title>Conservative versus exact garbage collectors</title>
          <para>One other categorization of garbage collectors goes to the 
          <quote>exactness</quote> of its ability to detect garbage. A 
          <firstterm>conservative garbage collector</firstterm> assumes that 
          any bit pattern inside an object that if interpreted as a pointer, 
          points to a valid object, is in fact such a pointer. A conservative
          collector usually has no knowledge of the exact binary layout of an 
          object, and is therefore the only choice in garbage collectors for
          languages designed without consideration for one, such as C and C++.
          Conservative collectors might in some cases yield false positives, 
          causing legitimate garbage to remain uncollected.</para>
          
          <para>In contrast, an <firstterm>exact garbage collector</firstterm>
          has intimate knowledge of the binary layout of an object, and can 
          accurately determine which fields are pointers. An exact collector
          yields no false positives and will collect all garbage. Such a 
          collector usually requires explicit support for it in the language
          compiler or the runtime engine.</para>
        </sidebar>
      </sect3>
    
      <sect3 id="chapter_2-sect-1.3.2">
        <title>Reference counting</title>
        <para>Another form of garbage collection, although not commonly referred
        to as such, is <firstterm>reference counting.</firstterm> In this mechanism, 
        each object maintains a count of how many other objects are referring to 
        it. For every time another object obtains a reference to this object, the
        other object is responsible for incrementing this count. Likewise, each
        time a reference to a reference counted object goes out of scope or the
        object is no longer needed, this count needs to be decremented by one.</para>
        
        <para>Obviously, this mechanism breaks down in the case where one  
        object reference itself, either directly or indirectly. This is 
        called a <firstterm>cycle</firstterm>. Traditional reference counting 
        mechanisms are unable to deal with this case. Languages and environments
        depending on reference counting either supplement the mechanism with a 
        tracing garbage collector or mandate that cycles are not permitted.</para>
        
        <para>Reference counting can be either explicit or implicit. In an 
        environment that uses implicit reference counting, reference counts are 
        incremented and decremented automatically as a side effect of variable
        assignments. Explicit reference counting requires the programmer to 
        explicitly call functions or methods that adjust the reference count.</para>
        
        <para>The choice of implicit or reference counting is not necessarily an 
        either/or, even within a single language/technology. Some languages 
        accessing COM objects (which are reference counted) use implicit 
        reference counting, while others again use explicit. Languages like
        Visual Basic 6 are examples of the former, while C/C++ are the most 
        common examples of the latter.</para>      
        
      </sect3>
    </sect2>
      
  </sect1>
  
  <sect1 id="chapter_2-sect-2">
  
    <title>Advantages and disadvantages of the two models</title>
    <para>Obviously, the two schemes of automatic memory management both have 
    their benefits and disadvantages (otherwise, there wouldn't really be a need 
    for two disparate models in the first place!).</para>
    
    <para>Advantages of tracing garbage collectors include:</para>
    
    <variablelist>
    
      <varlistentry>
        <term>Programming simplicity</term>
        <listitem>
          <para>Programming in an environment that provides a tracing garbage
          collector is very simple; usually you can just allocate objects and 
          forget about them. The garbage collector will deal with unreachable
          objects.</para>
        </listitem>
      </varlistentry>    
      
      <varlistentry>
        <term>Locality of reference</term>
        <listitem>
          <para>The allocation strategies of most implementations of tracing
          garbage collectors (allocating a new object is often just a matter of
          incrementing a pointer) will usually lead to related objects being
          located close to one another in memory. This leads to a greater
          chance of objects being in the CPU's cache when accessing them from
          methods of other objects, as well as reducing the program's working
          set and reducing the number of page faults associated with the
          program.</para> 
          
          <para>These benefits are highly dependent on factors such as the
          exact allocation and compaction mechanisms chosen, though.</para>
        </listitem>
      </varlistentry>
    
    </variablelist>
    
    <para>Among the disadvantages, we find:</para>
    
    <variablelist>
      
      <varlistentry>
        <term>No deterministic destruction</term>
        <listitem>
          <para>It is usually not possible to determine <emphasis>when</emphasis> an
          object under the control of a garbage collector is destroyed. In
          quite a few cases, such objects hold onto external resources such as
          files, operating system synchronization primitives, window handles
          etc... Some of these resources are in short supply, and should be
          disposed of as soon as possible.</para>
          
          <para>Programmers cannot then rely on the garbage collector to release 
          these resources in a timely. They are thus forced to provide an explicit 
          <function>Close()</function> or <function>Dispose()</function> method 
          on types with non-trivial finalization requirements.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Unpredictable runtime behavior</term>
        <listitem>
          <para>A tracing garbage collector is not entirely predictable; it 
          might decide to stop and perform a collection at any time. 
          Furthermore, a full collection might take a relatively long time to 
          perform, causing the program to pause while it is running. Although
          faster hardware and better garbage collection algorithms have gone a 
          long way in mitigating this factor in later years, there is still a 
          widespread perception (justified or not) of this being a major issue.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    
    <para>The benefits of reference counting are the same as the drawbacks of
    tracing collectors:</para>
    
    <variablelist>
    
      <varlistentry>
        <term>Deterministic destruction</term>
        <listitem>
          <para>Given the source code of a program using a reference counted
          memory management solution, one can determine the exact sequence 
          point in execution where an object is destroyed. This ensures the
          timely destruction of external resources held onto by these objects.
         </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Predictable runtime behavior</term>
        <listitem>
          <para>A reference counted mechanism has predictable execution time;
          there are no long nondeterministic pauses. An object is removed at 
          the exact moment it becomes garbage.</para>
        </listitem>
      </varlistentry>
      
    </variablelist>
    
    <para>Of course, nothing is perfect:</para>
    
    <variablelist>
    
      <varlistentry>
        <term>Reference counts take up space</term>
        <listitem>
          <para>Every reference counted object needs to have a field
          containing the reference count. In most cases this implies an 
          overhead of 4 bytes per object. For environments in which a large
          number of small objects is the norm, this can amount to quite a bit
          of overhead.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Reference counting takes time</term>
        <listitem>
          <para>For every time a reference counted object is assigned to 
          another reference variable or passed to a function, the reference 
          count needs to be updated. The time spent doing this kind of 
          housekeeping is likely to be greater than the amortized time spent 
          doing collections in a tracing collector.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Unable to deal with cycles</term>
        <listitem>
          <para>A simple reference counting mechanism cannot deal with the
          case where an object direcly or indirectly contains a reference to 
          itself:</para>
          
          <figure id="chapter_2-fig-1">
            <title>A reference count cycle</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="refcountcycle.png" format="png"/> 
              </imageobject> 
            </mediaobject>
          </figure>
          
          <para>For this reason, environments using reference counting either
          prohibit reference cycles altogether or supplement reference counting
          with a tracing garbage collector. TODO: find more references here</para>
        </listitem>
      </varlistentry>
    </variablelist>
    
  </sect1>

</chapter>
